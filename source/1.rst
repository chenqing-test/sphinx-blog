此处应有大标题
==============

目录：
------

1. 前言

2. 正文

3. 小测试

4. 学习目标

5. 展望

6. 附部分\ ``pycharm``\ 与\ ``git``\ 使用指南

前言
----

    某次下午茶分享会中，王建淼提出了资料库的建设方案，并暂定了\ ``gitlab``\ 为资料库存储平台。

    基于平时的观察，发现大家对\ ``gitlab``\ 的使用并不频繁，同时无从了解大家对\ ``gitlab``\ 使用的熟悉程度。（或许可以做个小调查，但无论调查结果如何，并不影响本方案的实施）

    ``gitlab``\ 是个非常有用的工具

​
综合以上三点，有必要推动\ ``gitlab``\ 在平时工作中的应用。（并没有要马上开始建立资料库的意思）

​ 在此推荐一下\ ``gitlab``\ 的官方使用文档（强烈建议阅读）：

    ``gitlab``\ 使用说明文档：http://172.10.11.148/help

​ 由于内容比较多，应当有针对性的了解一部分内容。例如

    ``gitlab``\ 基础知识：http://172.10.11.148/help/gitlab-basics/README.md

    ``gitlab``
    ``markdown``\ 语法：http://172.10.11.148/help/user/markdown.md

或者这里还有个中文版

    https://git-scm.com/book/zh/v2

正文
----

​
大家感兴趣的话可以完成下面这个小测试，以此练习一下\ ``gitlab``\ 的使用。

​
测试包括网页端\ ``gitlab``\ 的各项功能熟悉与本地\ ``pycharm``\ 结合git的版本控制、远程提交。

​
如果想利用\ ``gitlab``\ 建立资料库，那么无论是上传还是查阅，全员熟悉一下\ ``gitlab``\ 的使用是非常有必要的

​
``gitlab``\ 是高效的项目代码管理工具，兼有讨论、分享、留存的功能，应当先提高\ ``gitlab``\ 的利用率。

小测试
------

提供一个公用测试项目：http://172.10.11.148/ZhongFangjun/practice\_gitlab

完成如下操作：

    建议先学会如何利用issue提问，然后遇到问题可以通过提问解决

    相关资料可以查阅该项目的issue与Wiki，说不定能找到别人的解决方案

1.  下载项目至本地
2.  通过\ ``pycharm``
3.  创建分支（\ **本级内容均通过\ ``pycharm``\ 内置功能完成**\ ）（\ **不用\ ``pycharm``\ 的筒子完成时形式不限**\ ）
4.  运行\ ``Project_generator.py``
5.  提交（add&commit）
6.  推送至\ ``gitlab``
7.  提交合并分支请求
8.  解决冲突（如果有冲突的话）
9.  完成合并
10. 删除分支
11. 查看历史操作
12. 创建一个\ ``issue``
13. 添加标签
14. 回复一个别人的\ ``issue``
15. 访问\ ``Wiki``
16. 创建一个自己的页面
17. 在\ ``Snippets``\ 提交一个任意函数代码

学习目标（可选）
----------------

1.  ``gitlab``\ 登录、查看项目、克隆项目到本地
2.  创建自己的项目，上传、推送代码
3.  了解如何在\ ``pycharm``\ 中使用git
4.  创建分支，在分支中改动代码
5.  合并分支，解决冲突
6.  查看历史版本代码、快速定位历史改动

7.  创建多人协作（团队）项目
8.  了解团队项目与单人项目的异同
9.  在团队项目中提交代码修改
10. 在团队项目中提交合并分支的请求

11. 提出issue（添加标签）
12. 回复issue

13. 创建Wiki
14. 完善Wiki

展望
----

1. 通过\ ``pycharm``\ 熟练使用git进行本地版本控制，养成在日常代码撰写前，先添加git的习惯
2. 部分项目通过\ ``gitlab``\ 进行交流，可选且不限于

   1. 发布任务要求（通过\ ``issue``\ ）
   2. 版本更新
   3. 提交进度

3. 通过Wiki记录项目过程，可选且不限于

   1. 遇到过的bug集锦
   2. 参考的资料网址
   3. 参考文献
   4. 对项目/模型的总结/学习心得

4. 时机成熟时，利用\ ``gitlab``\ 建立项目/模型资料库，通过标签、Wiki、Issue等建立资料归类标准，建立资料分享鼓励机制

附部分\ ``pycharm``\ 与\ ``git``\ 使用指南
------------------------------------------

*如果习惯了用\ ``git bash here``\ 输入命令行代码进行git提交推送，可以略过这部分内容，或仅作了解*

1. 当你想要把本地代码上传到一个新项目中时：

先在\ ``gitlab``\ 新建项目，然后复制项目地址

然后\ ``pycharm``\ 打开本地代码

::

    # pycharm->Terminal
    git init
    git remote add origin ssh://git@172.10.11.148:1022/*YOUR_NAME/*YOUR_PROJECT.git
    # pycharm->VCS->Git->Add (或在pycharm中选择文件右键Git->Add)(或继续在Terminal中输入add命令)
    # VCS->Commit
    # VCS->Git->Push

2. 当前项目已经与\ ``gitlab``\ 建立连接

::

    # pycharm->VCS->Git->Remotes 查看当前项目的git地址
    # pycharm->VCS->Git->Add 
    # VCS->Commit
    # VCS->Git->Push

3. ``pycharm``\ 创建分支并切换分支

::

    # pycharm->VCS->Git->Branches..
    # +New Branch
    # 输入 branch_by_*name
    # 此时应已自动切换至该分支
